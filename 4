--create database Apr_17_2025
--use Apr_17_2025

--create table weather(
--id int,
--record_date date, 
--temperature int);

--insert into weather values(1,'2025-01-01',10);
--insert into weather values(2,'2025-01-02',12);
--insert into weather values(3,'2025-01-03',13);
--insert into weather values(4,'2025-01-04',11);
--insert into weather values(5,'2025-01-05',12);
--insert into weather values(6,'2025-01-06',9);
--insert into weather values(7,'2025-01-07',10);

--Q1. Write a SQL Query to find all dates with higher temperatures compared to its previous dates (yesterday).

--with cte as (
--select *,
--case when LAG(temperature) over(  order by record_date) < temperature then 1 else 0 end as flag
--from weather )
--select 
--record_date
--from cte 
--where flag = 1

----------------------------------------------------------------------------------------------------------------------------------------
--CREATE TABLE customers (
--    id INT PRIMARY KEY,
--    first_name VARCHAR(50),
--    last_name VARCHAR(50),
--    city VARCHAR(50),
--    address VARCHAR(100),
--    phone_number VARCHAR(20)
--);


--INSERT INTO customers(id, first_name, last_name, city, address, phone_number) VALUES
--(8, 'John', 'Joseph', 'San Francisco', NULL, '928-386-8164'),
--(7, 'Jill', 'Michael', 'Austin', NULL, '813-297-0692'),
--(4, 'William', 'Daniel', 'Denver', NULL, '813-368-1200'),
--(5, 'Henry', 'Jackson', 'Miami', NULL, '808-601-7513'),
--(13, 'Emma', 'Isaac', 'Miami', NULL, '808-690-5201'),
--(14, 'Liam', 'Samuel', 'Miami', NULL, '808-555-5201'),
--(15, 'Mia', 'Owen', 'Miami', NULL, '808-640-5201'),
--(1, 'Mark', 'Thomas', 'Arizona', '4476 Parkway Drive', '602-993-5916'),
--(12, 'Eva', 'Lucas', 'Arizona', '4379 Skips Lane', '301-509-8805'),
--(6, 'Jack', 'Aiden', 'Arizona', '4833 Coplin Avenue', '480-303-1527'),
--(2, 'Mona', 'Adrian', 'Los Angeles', '1958 Peck Court', '714-409-9432'),
--(10, 'Lili', 'Oliver', 'Los Angeles', '3832 Euclid Avenue', '530-695-1180'),
--(3, 'Farida', 'Joseph', 'San Francisco', '3153 Rhapsody Street', '813-368-1200'),
--(9, 'Justin', 'Alexander', 'Denver', '4470 McKinley Avenue', '970-433-7589'),
--(11, 'Frank', 'Jacob', 'Miami', '1299 Randall Drive', '808-590-5201');

--CREATE TABLE Orders (
--    id INT PRIMARY KEY,
--    cust_id INT,
--    order_date DATE,
--    order_details VARCHAR(50),
--    total_order_cost INT
--);

--INSERT INTO Orders (id, cust_id, order_date, order_details, total_order_cost) VALUES
--(1, 3, '2019-03-04', 'Coat', 100),
--(2, 3, '2019-03-01', 'Shoes', 80),
--(3, 3, '2019-03-07', 'Skirt', 30),
--(4, 7, '2019-02-01', 'Coat', 25),
--(5, 7, '2019-03-10', 'Shoes', 80),
--(6, 15, '2019-02-01', 'Boats', 100),
--(7, 15, '2019-01-11', 'Shirts', 60),
--(8, 15, '2019-03-11', 'Slipper', 20),
--(9, 15, '2019-03-01', 'Jeans', 80),
--(10, 15, '2019-03-09', 'Shirts', 50),
--(11, 5, '2019-02-01', 'Shoes', 80),
--(12, 12, '2019-01-11', 'Shirts', 60),
--(13, 12, '2019-03-11', 'Slipper', 20),
--(14, 4, '2019-02-01', 'Shoes', 80),
--(15, 4, '2019-01-11', 'Shirts', 60),
--(16, 3, '2019-04-19', 'Shirts', 50),
--(17, 7, '2019-04-19', 'Suit', 150),
--(18, 15, '2019-04-19', 'Skirt', 30),
--(19, 15, '2019-04-20', 'Dresses', 200),
--(20, 12, '2019-01-11', 'Coat', 125),
--(21, 7, '2019-04-01', 'Suit', 50),
--(22, 7, '2019-04-02', 'Skirt', 30),
--(23, 7, '2019-04-03', 'Dresses', 50),
--(24, 7, '2019-04-04', 'Coat', 25),
--(25, 7, '2019-04-19', 'Coat', 125);

--Identify customers who did not place an order between 2019-02-01 and 2019-03-01.
--Include:
--Customers who placed orders only outside this date range.
--Customers who never placed any orders.
--Output the customers' first names.

--with cte as (
--select 
--cust_id
--from Orders
--where order_date between '2019-02-01' and '2019-03-01')
--select 
--first_name
--from cte c
--right join customers c1
--on c.cust_id = c1.id
--where cust_id is null

----------------------------------------------------------------------------------------------------------------------------------------

--CREATE TABLE Transactions (
--    transaction_id INT,
--    day DATETIME,
--    amount INT
--);

--INSERT INTO Transactions (transaction_id, day, amount) VALUES 
--(8, '2021-04-03 15:57:28', 57),
--(9, '2021-04-28 08:47:25', 21),
--(1, '2021-04-29 13:28:30', 58),
--(5, '2021-04-28 16:39:59', 40),
--(6, '2021-04-29 23:39:28', 58);


--Write an SQL query to report the IDs of the transactions with the maximum amount on their respective day. 
--If in one day there are multiple such transactions, return all of them.Return the result table in ascending order by transaction id.

--select transaction_id 
--from(
--select *,
--DENSE_RANK() over(partition by format(day,'dd-MM-yyy') order by amount desc) as rn
--from Transactions) a
--where rn = 1
--order by transaction_id 

----------------------------------------------------------------------------------------------------------------------------------------

--CREATE TABLE Salaries (
--    company_id INT,
--    employee_id INT,
--    employee_name VARCHAR(50),
--    salary INT,
--    PRIMARY KEY (company_id, employee_id)
--);

--INSERT INTO Salaries (company_id, employee_id, employee_name, salary) VALUES
--(1, 1, 'Tony', 2000),
--(1, 2, 'Pronub', 21300),
--(1, 3, 'Tyrrox', 10800),
--(2, 1, 'Pam', 300),
--(2, 7, 'Bassem', 450),
--(2, 9, 'Hermione', 700),
--(3, 7, 'Bocaben', 100),
--(3, 2, 'Ognjen', 2200),
--(3, 13, 'Nyancat', 3300),
--(3, 15, 'Morninngcat', 7777);

--Write an SQL query to find the salaries of the employees after applying taxes.

--The tax rate is calculated for each company based on the following criteria:

--0% If the max salary of any employee in the company is less than 1000$.
--24% If the max salary of any employee in the company is in the range [1000,10000) inclusive.
--49% If the max salary of any employee in the company is greater than 10000$.
--Return the result table in any order. Round the salary to the nearest integer.

--with cte as(
--select *,
--MAX(salary) over(partition by company_id) as max_sal
--from Salaries )
--select *,
--case when max_sal < 1000 then salary
--           when max_sal between 1000 and 10000 then salary - salary * 0.24
--		   when max_sal > 10000 then salary - salary * 0.49 
--		   end as max_sal
--from cte

----------------------------------------------------------------------------------------------------------------------------------------
--create table seat(
--id int, 
--name varchar(10))

--insert into seat values(1,'John')
--insert into seat values(2,'Tom')
--insert into seat values(3,'Yash')
--insert into seat values(4,'Bhavna')
--insert into seat values(5,'Aryan')
--insert into seat values(6,'Kiran')
--insert into seat values(7,'Prativa')
--insert into seat values(8,'Ash')

--Q. Write an SQL query to swap the seat IDs of every two consecutive students.
--1 f the last student has an odd ID, it remains unchanged.

--with cte as (
--select *,
-- count(id) over() as total
--from seat ),
--cte2 as (
--select *,
--case when id <> total and id % 2 <> 0  then id +1
--           when  id <> total and id % 2 = 0 then id -1
--		    when id = total and id % 2 <> 0 then id 
--			else id -1 end as new
--from cte )
--select 
--new, name
--from cte2
--order by new
